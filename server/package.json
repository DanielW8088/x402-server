{
  "name": "x402-token-mint-server",
  "version": "1.0.0",
  "description": "Token minting server - pay 1 USDC to mint tokens (x402 enabled)",
  "type": "module",
  "main": "index.ts",
  "scripts": {
    "dev": "tsx watch index-multi-token.ts",
    "dev:queue": "tsx watch index-queue.ts",
    "lp-deployer": "tsx lp-deployer-standalone.ts",
    "lp-deployer:watch": "tsx watch lp-deployer-standalone.ts",
    "start": "tsx index-multi-token.ts",
    "start:queue": "tsx index-queue.ts",
    "build": "tsc",
    "address": "tsx getAddress.ts",
    "check": "tsx checkPendingTx.ts",
    "check:role": "tsx checkRole.ts",
    "db:init": "node init-db.js",
    "db:migrate": "node init-db.js",
    "db:migrate-verification": "psql $DATABASE_URL -f db/add-verification-fields.sql",
    "db:migrate:001": "psql $DATABASE_URL -f db/migrations/001_add_indexes.sql",
    "db:migrate:002": "psql $DATABASE_URL -f db/migrations/002_add_cache_fields.sql",
    "db:migrate:003": "psql $DATABASE_URL -f db/migrations/003_add_foreign_keys.sql",
    "db:migrate:all": "cat db/migrations/001_add_indexes.sql db/migrations/002_add_cache_fields.sql db/migrations/003_add_foreign_keys.sql | psql $DATABASE_URL",
    "db:update-cache": "psql $DATABASE_URL -c 'SELECT update_all_token_caches();'",
    "queue:config": "node check-queue-config.js",
    "verify": "tsx scripts/verify-contracts.ts",
    "verify:base": "tsx scripts/verify-contracts.ts -- --network=base",
    "verify:sepolia": "tsx scripts/verify-contracts.ts -- --network=base-sepolia",
    "check-verification": "tsx scripts/check-verification-status.ts",
    "debug-verification": "node -e \"const{Pool}=require('pg');require('dotenv').config();const a=process.argv[1];if(!a){console.error('Usage: npm run debug-verification <address>');process.exit(1);}const p=new Pool({connectionString:process.env.DATABASE_URL,ssl:process.env.DB_SSL_ENABLED!=='false'?{rejectUnauthorized:false}:false});(async()=>{try{const r=await p.query('SELECT name,symbol,address,constructor_args,verification_error,verification_retry_count FROM deployed_tokens WHERE address=$1',[a.toLowerCase()]);if(r.rows.length>0){const t=r.rows[0];console.log('\\\\n=== CONTRACT:',t.name,'(',t.symbol,')===');console.log('Address:',t.address);console.log('Retries:',t.verification_retry_count||0);console.log('\\\\n=== CONSTRUCTOR ARGS ===');console.log(JSON.stringify(t.constructor_args,null,2));console.log('\\\\n=== ERROR ===');console.log(t.verification_error||'No error');}else{console.log('Contract not found');}await p.end();}catch(e){console.error(e.message);process.exit(1);}})();\" --"
  },
  "dependencies": {
    "@coinbase/cdp-sdk": "^1.22.0",
    "@coinbase/x402": "latest",
    "@types/cors": "^2.8.19",
    "@types/ioredis": "^4.28.10",
    "@types/pg": "^8.11.10",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "ioredis": "^5.8.2",
    "pg": "^8.13.1",
    "viem": "^2.21.54",
    "x402-express": "latest"
  },
  "devDependencies": {
    "@types/express": "^5.0.0",
    "@types/node": "^22.10.2",
    "tsx": "^4.19.2",
    "typescript": "^5.7.2"
  }
}
