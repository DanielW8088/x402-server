# Server Configuration
PORT=4021

# Network (base-sepolia or base)
NETWORK=base-sepolia

# RPC URLs (optional, defaults to public RPCs)
# WARNING: Public RPCs have rate limits (429 errors). For production, use private RPC services.
# Public RPCs (free, but limited):
# BASE_RPC_URL=https://mainnet.base.org
# BASE_SEPOLIA_RPC_URL=https://sepolia.base.org
# Private RPCs (recommended for production):
# BASE_RPC_URL=https://base-mainnet.g.alchemy.com/v2/YOUR_API_KEY
# BASE_SEPOLIA_RPC_URL=https://base-sepolia.g.alchemy.com/v2/YOUR_API_KEY

# Server Private Key (for receiving USDC payments)
# This account receives USDC payments from users
# Used by PaymentQueueProcessor to process USDC transfers
SERVER_PRIVATE_KEY=0x...

# Minter Private Key (for executing mint transactions)
# This account must have MINTER_ROLE on all token contracts
# Used by MintQueueProcessor to execute mint() and batchMint() transactions
# IMPORTANT: Grant MINTER_ROLE to this address after deploying tokens
MINTER_PRIVATE_KEY=0x...

# LP Deployer Configuration (for lp-deployer-standalone.ts)
# Private key for token owner (also used for LP deployment)
# This wallet must be:
#   1. Token owner (for transferAssetsForLP, setLaunchTool, confirmLpLive)
#   2. Have sufficient USDC to provide initial liquidity
# Used for ALL LP deployment operations
LP_DEPLOYER_PRIVATE_KEY=0x...

# LaunchTool Contract Address (REQUIRED for LP deployment)
# Deploy LaunchTool first using: npx hardhat run scripts/deployLaunchTool.js --network <network>
# Base Sepolia Example: 0x91cAfe77F5266FEa14f6db43Bb73BeF6ba80c609
# Base Mainnet: Deploy your own
LAUNCH_TOOL_ADDRESS=0x...

# Excess USDC Recipient Address
# After LP deployment, excess USDC (beyond LP requirements) will be sent here
# If not set, excess USDC will be sent to the token deployer address
EXCESS_RECIPIENT_ADDRESS=0x...

# USDC Contract Address (optional, auto-detected based on network)
# Base Sepolia: 0x036CbD53842c5426634e7929541eC2318f3dCF7e
# Base Mainnet: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
# USDC_CONTRACT_ADDRESS=0x036CbD53842c5426634e7929541eC2318f3dCF7e

# Coinbase CDP API Keys (required for mainnet)
# Get yours at: https://portal.cdp.coinbase.com/
CDP_API_KEY_ID=
CDP_API_KEY_SECRET=

# PostgreSQL Database Connection (REQUIRED for multi-token system)
# Format: postgresql://username:password@hostname:port/database
DATABASE_URL=postgresql://postgres:password@localhost:5432/token_mint

# Redis Configuration (optional, for caching trending tokens)
# Default: redis://localhost:6379
# If Redis is unavailable, caching will be disabled gracefully
REDIS_URL=redis://localhost:6379

# Cache TTL Settings (in seconds)
# Trending tokens list cache duration (default: 30s)
TOKENS_CACHE_TTL=30
# Individual token info cache duration (default: 10s)
TOKEN_CACHE_TTL=10

# Database SSL Configuration
# Set to 'false' to completely disable SSL (not recommended for production)
# Default: true (SSL enabled for remote databases)
# DB_SSL_ENABLED=true

# Database SSL Certificates (optional, for production databases requiring cert auth)
# Leave empty to use default SSL with rejectUnauthorized: false
# Set these paths if your database requires certificate authentication (e.g., Google Cloud SQL)
# DB_SSL_CA=/path/to/server-ca.pem
# DB_SSL_CERT=/path/to/client-cert.pem
# DB_SSL_KEY=/path/to/client-key.pem

# Queue Configuration (optional, defaults below)
BATCH_INTERVAL_SECONDS=10
MAX_BATCH_SIZE=50

# Contracts Directory (optional, defaults to ../contracts relative to server/)
# Set this if your contracts directory is in a non-standard location
# CONTRACTS_DIR=/absolute/path/to/contracts

# x402 Protocol Configuration (optional, enabled by default)
# x402 is an open payment standard that enables gasless payments via HTTP 402
# Default facilitator: https://x402.coinbase.com
X402_FACILITATOR_URL=https://x402.coinbase.com
# Set to 'false' to disable x402 protocol support (will only support traditional EIP-3009)
# X402_ENABLED=true

# Important Notes:
# 1. USDC should be sent to each token contract address (not a central address)
# 2. Each token mint server needs MINTER_ROLE on the respective token contract
# 3. LP deployment is manual - use the deployLiquidity.js script after max mints reached
# 4. Excess USDC from LP deployment is automatically sent to EXCESS_RECIPIENT_ADDRESS

